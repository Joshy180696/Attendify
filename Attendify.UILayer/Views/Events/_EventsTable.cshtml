@using Attendify.DomainLayer.Helpers
@using Attendify.DomainLayer.DTO
@model PaginatedList<EventListDto>

@{
    string sortBy = ViewContext.HttpContext.Request.Query["sortBy"].ToString();
    string sortDirection = ViewContext.HttpContext.Request.Query["sortDirection"].ToString();
    string dateSortDirection = (sortBy == "date" && sortDirection == "asc") ? "desc" : "asc";
    string rsvpSortDirection = (sortBy == "rsvpCount" && sortDirection == "asc") ? "desc" : "asc";
}

<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Title</th>
                <th>
                    <a href="#" onclick="sortTable('date', '@dateSortDirection')" class="@(sortBy == "date" ? "text-info fw-bold" : "")">
                        Date
                        @if (sortBy == "date")
                        {
                            <i class="bi @(sortDirection == "asc" ? "bi-arrow-up" : "bi-arrow-down")"></i>
                        }
                        else
                        {
                            <i class="bi bi-arrow-down-up"></i>
                        }
                    </a>
                </th>
                <th>Can RSVP</th>
                <th>
                    <a href="#" onclick="sortTable('rsvpCount', '@rsvpSortDirection')" class="@(sortBy == "rsvpCount" ? "text-info fw-bold" : "")">
                        RSVP Count
                        @if (sortBy == "rsvpCount")
                        {
                            <i class="bi @(sortDirection == "asc" ? "bi-arrow-up" : "bi-arrow-down")"></i>
                        }
                        else
                        {
                            <i class="bi bi-arrow-down-up"></i>
                        }
                    </a>
                </th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ev in Model)
            {
                <tr>
                    <td>@ev.Title</td>
                    <td>@ev.DateTime.ToString("g")</td>
                    <td>
                        @if (ev.DateTime > DateTime.UtcNow)
                        {
                            <span class="text-muted">Yes</span>
                        }
                        else
                        {
                            <span class="text-muted">No</span>
                        }
                    </td>
                    <td><span class="badge bg-info">@ev.RSVPCount</span></td>
                    <td>
                        <div class="dropdown">
                            <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" id="dropdownMenuButton_@ev.Id" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi bi-three-dots-vertical"></i>
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton_@ev.Id">
                                <li>
                                    <a class="dropdown-item" asp-action="Details" asp-route-id="@ev.Id">
                                        <i class="bi bi-list-ul me-1"></i> View RSVPs
                                    </a>
                                </li>
                                <li>
                                    <a class="dropdown-item text-danger" href="#" onclick="openDeleteModal(@ev.Id, '@ev.Title'); return false;">
                                        <i class="bi bi-trash me-1"></i> Delete
                                    </a>
                                </li>
                            </ul>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="paginator" aria-label="Page navigation">
    <div class="pagination-container" style="display:flex; justify-content:center;">
        <ul class="pagination">
            @if (Model.HasPreviousPage)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("LoadEvents", new { pageNumber = Model.CurrentPage - 1, pageSize = Model.PageSize })" onclick="loadPage(event, this)">Previous</a>
                </li>
            }

            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                    <a class="page-link" href="@Url.Action("LoadEvents", new { pageNumber = i, pageSize = Model.PageSize })" onclick="loadPage(event, this)">@i</a>
                </li>
            }
            @if (Model.HasNextPage)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("LoadEvents", new { pageNumber = Model.CurrentPage + 1, pageSize = Model.PageSize })" onclick="loadPage(event, this)">Next</a>
                </li>
            }
        </ul>
    </div>
</div>