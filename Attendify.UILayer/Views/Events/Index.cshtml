@using Attendify.DomainLayer.Helpers
@using Attendify.DomainLayer.DTO
@model PaginatedList<EventListDto>
@{
    ViewData["Title"] = "Events";
}
@section Styles {
    <link href="~/css/EventsPage.css" rel="stylesheet" />
    <link href="~/css/Paginator.css" rel="stylesheet" />
    <link href="~/css/Spinner.css" rel="stylesheet" />
}

<div class="text-center d-flex justify-content-between align-items-center mb-4">
    <h2 class="display-4">Events History</h2>
</div>
<hr />




<!-- Delete event modal confirmation -->
<div class="modal fade" id="deleteEventModal" tabindex="-1" aria-labelledby="deleteEventModalLabel" aria-hidden="true">
    @Html.AntiForgeryToken()
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteEventModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the event "<b><span id="deleteEventTitle"></span></b>"? This action cannot be undone, and all associated RSVPs will also be deleted.</p>
                <input type="hidden" id="deleteEventId" />
            </div>
            <div class="modal-footer" style="justify-content: center;">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmDeleteEvent()">Delete</button>
            </div>
        </div>
    </div>
</div>

<div class="container my-5" id="eventsTableContainer">
    <!-- Spinner -->
    <div id="loadingSpinner" class="text-center my-5" style="display: none;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <!-- Partial view content -->
    <div id="eventsContent">
        @if (!Model.Any())
        {
            <p>No events available. <a asp-controller="Home" asp-action="Index" class="btn btn-info" style="color:white">Create one now!</a></p>
        }
        else
        {
            @await Html.PartialAsync("_EventsTable", Model)
        }
    </div>
</div>

<input type="hidden" id="pageSize" value="10" />

@section Scripts {
    <script>
        function loadPage(event, link) {
            event.preventDefault();
            const relativeUrl = link.getAttribute('href');
            const baseUrl = window.location.origin;
            const fullUrl = new URL(relativeUrl, baseUrl);
            const pageSize = document.getElementById('pageSize').value;

            const params = new URLSearchParams(fullUrl.search);
            params.set('pageSize', pageSize);
            params.set('showAll', true);

            // Preserve sort parameters
            const sortBy = new URLSearchParams(window.location.search).get('sortBy');
            const sortDirection = new URLSearchParams(window.location.search).get('sortDirection');
            if (sortBy) params.set('sortBy', sortBy);
            if (sortDirection) params.set('sortDirection', sortDirection);

            const spinner = document.querySelector('#loadingSpinner');
            const eventsContent = document.querySelector('#eventsContent');

            // Show spinner, fade out content
            spinner.style.display = "block";
            eventsContent.style.opacity = "0";
            eventsContent.style.transition = "opacity 0.3s ease";

            fetch(`${fullUrl.pathname}?${params.toString()}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json(); // Expect JSON from controller
                })
                .then(data => {
                    if (data.html) {
                        eventsContent.innerHTML = data.html; // Render partial HTML
                        spinner.style.display = "none";
                        eventsContent.style.opacity = "1";
                        // Update the URL without reloading the page
                        const newUrl = '@Url.Action("Index", "Events")' + `?${params.toString()}`;
                        window.history.pushState({}, '', newUrl);
                    } else {
                        eventsContent.innerHTML = '<p>No events available</p>';
                        spinner.style.display = "none";
                        eventsContent.style.opacity = "1";
                    }
                })
                .catch(error => {
                    console.error('Error loading page:', error);
                    toastr.error('Failed to load events. Please try again.');
                    spinner.style.display = "none";
                    eventsContent.style.opacity = "1"; // Fade back existing content
                });
        }

        function sortTable(column, direction) {
            const url = '@Url.Action("LoadEvents", "Events")';
            const pageSize = document.getElementById('pageSize').value;
            const params = new URLSearchParams(window.location.search);

            // Set sorting parameters
            params.set('sortBy', column);
            params.set('sortDirection', direction);
            params.set('pageNumber', 1); // Reset to first page on sort
            params.set('pageSize', pageSize);
            params.set('showAll', true);

            const spinner = document.querySelector('#loadingSpinner');
            const eventsContent = document.querySelector('#eventsContent');

            // Show spinner, fade out content
            spinner.style.display = "block";
            eventsContent.style.opacity = "0";
            eventsContent.style.transition = "opacity 0.3s ease";

            fetch(`${url}?${params.toString()}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json(); // Expect JSON from controller
                })
                .then(data => {
                    if (data.html) {
                        eventsContent.innerHTML = data.html; // Render partial HTML
                        spinner.style.display = "none";
                        eventsContent.style.opacity = "1";
                        // Update the URL without reloading the page
                        const newUrl = '@Url.Action("Index", "Events")' + `?${params.toString()}`;
                        window.history.pushState({}, '', newUrl);
                    } else {
                        eventsContent.innerHTML = '<p>No events available</p>';
                        spinner.style.display = "none";
                        eventsContent.style.opacity = "1";
                    }
                })
                .catch(error => {
                    console.error('Error sorting events:', error);
                    toastr.error('Failed to sort events. Please try again.');
                    spinner.style.display = "none";
                    eventsContent.style.opacity = "1"; // Fade back existing content
                });
        }

        // Open the delete confirmation modal
        let currentEventId = null;

        function openDeleteModal(eventId, eventTitle) {
            currentEventId = eventId;
            document.getElementById('deleteEventTitle').textContent = eventTitle;
            document.getElementById('deleteEventId').value = eventId;
            const modal = new bootstrap.Modal(document.getElementById('deleteEventModal'));
            modal.show();
        }
        // Confirm the delete action
        function confirmDeleteEvent() {
            const id = document.getElementById('deleteEventId').value;
            console.log(id)
            if (!id || id === "0") {
                toastr.error('No event selected for deletion.');
                return;
            }



           fetch(`@Url.Action("Delete", "Events")/${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
         
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => { throw data; });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    toastr.success(data.message || 'Event deleted successfully!');
                    bootstrap.Modal.getInstance(document.getElementById('deleteEventModal')).hide();
                    // Refresh the events table
                    // Get the current sort parameters from the URL
                    const params = new URLSearchParams(window.location.search);
                    const sortBy = params.get('sortBy') || 'date'; // Default to 'date' if not set
                    const sortDirection = params.get('sortDirection') || 'asc'; // Default to 'asc' if not set

                    sortTable(sortBy, sortDirection); // Or use the current sort parameters to preserve them
                } else {
                    toastr.error(data.message || 'Failed to delete event.');
                }
            })
            .catch(error => {
                console.error('Error deleting event:', error);
                toastr.error(error.message || 'Failed to delete event.');
            });
        }


        document.addEventListener('DOMContentLoaded', () => {
            const eventsContent = document.querySelector('#eventsContent');
            eventsContent.style.opacity = "1";
            eventsContent.style.transition = "opacity 0.3s ease";
        });
    </script>
}