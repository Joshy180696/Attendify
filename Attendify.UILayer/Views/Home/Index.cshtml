@using Attendify.DomainLayer.Helpers
@using Attendify.DomainLayer.DTO
@model PaginatedList<EventListDto>

@{
    ViewData["Title"] = "Home Page";
}

@section Styles {
    <link href="~/css/Paginator.css" rel="stylesheet" />
    <link href="~/css/EventCard.css" rel="stylesheet" />
    <link href="~/css/HomePage.css" rel="stylesheet" />
    <link href="~/css/Spinner.css" rel="stylesheet" />
 
}

<!-- Title and Date picker plus create btn -->
<div class="text-center d-flex justify-content-between align-items-center mb-4">
    <h2 class="display-4">Welcome</h2>
    <div class="d-flex align-items-center gap-3">
        <div class="date-picker d-flex align-items-center gap-2">
            <input type="date" id="eventDate" class="form-control" value="@DateTime.Today.ToString("yyyy-MM-dd")" onchange="loadEventsByDate()" />
        </div>
        <button type="button" id="refreshEvents" class="btn btn-outline-secondary" title="Refresh Events" onclick="refresh()">
            Clear Filters
        </button>
        <button class="btn btn-info" style="color:white" data-bs-toggle="modal" data-bs-target="#createEventModal">Create Event</button>
    </div>
</div>
<hr />

<!-- Partial container -->
<!-- Always render the events container -->
<div class="container my-5" id="eventsContainer">
    <div id="loadingSpinner" style="display: none;">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
    @if (!Model.Any())
    {
        <div class="event-container">
            <div class="event-card empty-state">
                <h3>No Events Today</h3>
                <p class="date">Looks like it’s a quiet day!</p>
                <p>Why not kick things off? <button class="btn btn-info" style="color:white" data-bs-toggle="modal" data-bs-target="#createEventModal">Create an Event</button></p>
            </div>
        </div>
    }
    else
    {
        @await Html.PartialAsync("_EventsList", Model)
    }
</div>

<!-- Create Event Modal -->
<div class="modal fade" id="createEventModal" tabindex="-1" aria-labelledby="createEventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createEventModalLabel">Create New Event</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createEventForm">
                    @Html.AntiForgeryToken()
                    <div class="mb-3">
                        <label for="title" class="form-label">Title</label>
                        <input type="text" class="form-control" id="title" required maxlength="100" minlength="2" pattern="^[a-zA-Z0-9\s\-\.\,\!\?]+$" />
                        <div class="invalid-feedback" id="title-error"></div>
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <textarea class="form-control" id="description" maxlength="500" pattern="^[a-zA-Z0-9\s\-\.\,\!\?\'\" \(\)]+$"></textarea>
                        <div class="invalid-feedback" id="description-error"></div>
                    </div>
                    <div class="mb-3">
                        <label for="dateTime" class="form-label">Date & Time</label>
                        <input type="datetime-local" class="form-control" id="dateTime" required min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" value="@DateTime.Today.ToString("yyyy-MM-ddTHH:mm")" />
                        <div class="invalid-feedback" id="dateTime-error"></div>
                    </div>
                    <div class="mb-3">
                        <label for="location" class="form-label">Location</label>
                        <input type="text" class="form-control" id="location" required maxlength="200" minlength="2" pattern="^[a-zA-Z0-9\s\-\.\,\#\/]+$" />
                        <div class="invalid-feedback" id="location-error"></div>
                    </div>
                    <div class="mb-3">
                        <label for="createdBy" class="form-label">Your Name</label>
                        <input type="text" class="form-control" id="createdBy" required maxlength="50" minlength="2" pattern="^[a-zA-Z\s-\']+$" />
                        <div class="invalid-feedback" id="createdBy-error"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer" style="justify-content:center;">
                <button type="button" class="btn btn-info" style="color:white" id="createEventButton" onclick="submitCreateEvent()">
                    <span id="createButtonText">Create</span>
                    <span id="createSpinner" class="spinner-border spinner-border-sm" role="status" style="display: none;">
                        <span class="visually-hidden">Loading...</span>
                    </span>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Create RSVP Modal -->
<div class="modal fade" id="rsvpModal" tabindex="-1" aria-labelledby="rsvpModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rsvpModalLabel">RSVP to Event</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="rsvpForm">
                    @Html.AntiForgeryToken()
                    <div class="mb-3">
                        <label for="rsvpUserName" class="form-label">Your Name</label>
                        <input type="text" class="form-control" id="rsvpUserName" required maxlength="50" minlength="2" pattern="^[a-zA-Z\s-\']+$" />
                        <div class="invalid-feedback" id="rsvpUserName-error"></div>
                    </div>
                    <div class="mb-3">
                        <label for="rsvpResponse" class="form-label">Will you attend?</label>
                        <select class="form-select" id="rsvpResponse" required>
                            <option value="" disabled selected>Choose...</option>
                            <option value="Yes">Yes</option>
                            <option value="No">No</option>
                            <option value="Maybe">Maybe</option>
                        </select>
                        <div class="invalid-feedback" id="rsvpResponse-error"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer" style="justify-content:center;">
                <button type="button" class="btn btn-info" style="color:white" id="rsvpButton" onclick="submitRSVPFromModal()">
                    <span id="rsvpButtonText">Submit RSVP</span>
                    <span id="rsvpSpinner" class="spinner-border spinner-border-sm" role="status" style="display: none;">
                        <span class="visually-hidden">Loading...</span>
                    </span>
                </button>
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="pageSize" value="5" />

@section Scripts {
    <script>
        // Toastr configuration
        toastr.options = {
            positionClass: "toast-top-right",
            timeOut: 3000,
            progressBar: true,
            "toastClass": "toast-custom"
        };

             function loadPage(event, link) {
            event.preventDefault();
            const relativeUrl = link.getAttribute('href');
            const baseUrl = window.location.origin;
            const fullUrl = new URL(relativeUrl, baseUrl);
            const dateInput = document.getElementById('eventDate').value;
            const [year, month, day] = dateInput.split('-');
            const pageSize = document.getElementById('pageSize').value;
            const params = new URLSearchParams(fullUrl.search);
            params.set('year', year);
            params.set('month', month);
            params.set('day', day);
            params.set('pageSize', pageSize);

            const spinner = document.querySelector('#loadingSpinner');
            const eventsContainer = document.querySelector('#eventsContainer');

            // Show spinner, fade out content
            spinner.style.display = "block";
            eventsContainer.style.opacity = "0";

            fetch(`${fullUrl.pathname}?${params.toString()}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.isEmpty) {
                        const selectedDate = new Date(year, month - 1, day).toLocaleDateString();
                        toastr.info(`No events for ${selectedDate}`);
                        document.getElementById('eventDate').value = '@DateTime.Today.ToString("yyyy-MM-dd")';
                        // Update the container to show the "No Events Today" message for the reset date (today)
                        const todayYear = '@DateTime.Today.Year';
                        const todayMonth = '@DateTime.Today.Month'.padStart(2, '0');
                        const todayDay = '@DateTime.Today.Day'.padStart(2, '0');
                        const newParams = new URLSearchParams({
                            year: todayYear,
                            month: todayMonth,
                            day: todayDay,
                            pageNumber: 1,
                            pageSize: pageSize,
                            searchString: document.getElementById('searchString').value
                        });
                        fetch(`${fullUrl.pathname}?${newParams.toString()}`)
                            .then(response => response.json())
                            .then(todayData => {
                                if (todayData.isEmpty) {
                                    eventsContainer.innerHTML = `
                                        <div class="event-container">
                                            <div class="event-card empty-state">
                                                <h3>No Events Today</h3>
                                                <p class="date">Looks like it’s a quiet day!</p>
                                                <p>Why not kick things off? <button class="btn btn-info" style="color:white" data-bs-toggle="modal" data-bs-target="#createEventModal">Create an Event</button></p>
                                            </div>
                                        </div>`;
                                } else {
                                    eventsContainer.innerHTML = todayData.html;
                                }
                                // Re-add the spinner div
                                const spinnerDiv = document.createElement('div');
                                spinnerDiv.id = 'loadingSpinner';
                                spinnerDiv.style.display = 'none';
                                spinnerDiv.innerHTML = '<div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>';
                                eventsContainer.prepend(spinnerDiv);
                            })
                            .catch(error => {
                                console.error('Error loading today\'s events:', error);
                                toastr.error('Failed to load today\'s events. Please try again.');
                            });
                    } else if (eventsContainer) {
                        eventsContainer.innerHTML = data.html;
                        // Re-add the spinner div after updating the container
                        const spinnerDiv = document.createElement('div');
                        spinnerDiv.id = 'loadingSpinner';
                        spinnerDiv.style.display = 'none';
                        spinnerDiv.innerHTML = '<div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>';
                        eventsContainer.prepend(spinnerDiv);
                    }
                    spinner.style.display = "none";
                    eventsContainer.style.opacity = "1";
                })
                .catch(error => {
                    console.error('Error loading page:', error);
                    toastr.error('Failed to load events. Please try again.');
                    spinner.style.display = "none";
                    eventsContainer.style.opacity = "1";
                });
        }

        // Filter Data
        function refresh() {
            document.getElementById('eventDate').value = '@DateTime.Today.ToString("yyyy-MM-dd")';
            loadEventsByDate();
        }

                 function loadEventsByDate() {
            const dateInput = document.getElementById('eventDate').value;
            const [year, month, day] = dateInput.split('-');
            const pageSize = document.getElementById('pageSize').value;
            const url = '@Url.Action("LoadEvents", "Home")';
            const params = new URLSearchParams({
                year: year,
                month: month,
                day: day,
                pageNumber: 1,
                pageSize: pageSize,
                searchString: document.getElementById('searchString').value
            });

            const spinner = document.querySelector('#loadingSpinner');
            const eventsContainer = document.querySelector('#eventsContainer');

            // Show spinner, fade out content
            spinner.style.display = "block";
            eventsContainer.style.opacity = "0";

            fetch(`${url}?${params.toString()}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.isEmpty) {
                        const selectedDate = new Date(year, month - 1, day).toLocaleDateString();
                        if (data.searchString) {
                            // If there's a search string and no matches, just show the toastr message
                            // Do not update the eventsContainer, so existing events remain visible
                            toastr.info(`No events found matching "${data.searchString}" for ${selectedDate}`);
                        } else {
                            // If there's no search string and no events, show the "No Events" message
                            toastr.info(`No events for ${selectedDate}`);
                            document.getElementById('eventDate').value = '@DateTime.Today.ToString("yyyy-MM-dd")';
                            // Update the container to show the "No Events Today" message for the reset date (today)
                            const todayYear = '@DateTime.Today.Year';
                            const todayMonth = '@DateTime.Today.Month'.padStart(2, '0');
                            const todayDay = '@DateTime.Today.Day'.padStart(2, '0');
                            const newParams = new URLSearchParams({
                                year: todayYear,
                                month: todayMonth,
                                day: todayDay,
                                pageNumber: 1,
                                pageSize: pageSize,
                                searchString: document.getElementById('searchString').value
                            });
                            fetch(`${url}?${newParams.toString()}`)
                                .then(response => response.json())
                                .then(todayData => {
                                    if (todayData.isEmpty) {
                                        eventsContainer.innerHTML = `
                                            <div class="event-container">
                                                <div class="event-card empty-state">
                                                    <h3>No Events Today</h3>
                                                    <p class="date">Looks like it’s a quiet day!</p>
                                                    <p>Why not kick things off? <button class="btn btn-info" style="color:white" data-bs-toggle="modal" data-bs-target="#createEventModal">Create an Event</button></p>
                                                </div>
                                            </div>`;
                                    } else {
                                        eventsContainer.innerHTML = todayData.html;
                                    }
                                    // Re-add the spinner div
                                    const spinnerDiv = document.createElement('div');
                                    spinnerDiv.id = 'loadingSpinner';
                                    spinnerDiv.style.display = 'none';
                                    spinnerDiv.innerHTML = '<div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>';
                                    eventsContainer.prepend(spinnerDiv);
                                })
                                .catch(error => {
                                    console.error('Error loading today\'s events:', error);
                                    toastr.error('Failed to load today\'s events. Please try again.');
                                });
                        }
                    } else if (eventsContainer) {
                        eventsContainer.innerHTML = data.html;
                        // Re-add the spinner div after updating the container
                        const spinnerDiv = document.createElement('div');
                        spinnerDiv.id = 'loadingSpinner';
                        spinnerDiv.style.display = 'none';
                        spinnerDiv.innerHTML = '<div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div>';
                        eventsContainer.prepend(spinnerDiv);
                    }
                    spinner.style.display = "none";
                    eventsContainer.style.opacity = "1";
                })
                .catch(error => {
                    console.error('Error loading events:', error);
                    toastr.error('Failed to load events. Please try again.');
                    spinner.style.display = "none";
                    eventsContainer.style.opacity = "1";
                });
        }

        // Handle Event Creation
        function submitCreateEvent() {
            const form = document.getElementById('createEventForm');
            const createButton = document.getElementById('createEventButton');
            const buttonText = document.getElementById('createButtonText');
            const spinner = document.getElementById('createSpinner');

            // Clear previous errors and invalid states
            document.querySelectorAll('.invalid-feedback').forEach(el => {
                el.textContent = '';
                const input = el.parentElement.querySelector('.form-control, .form-select');
                if (input) {
                    input.classList.remove('is-invalid');
                }
            });

            if (form.checkValidity()) {
                // Show spinner, hide button text, disable button
                buttonText.style.display = 'none';
                spinner.style.display = 'inline-block';
                createButton.disabled = true;

                const eventData = {
                    Title: document.getElementById('title').value,
                    Description: document.getElementById('description').value,
                    DateTime: document.getElementById('dateTime').value,
                    Location: document.getElementById('location').value,
                    CreatedBy: document.getElementById('createdBy').value
                };

                console.log('Sending event data:', JSON.stringify(eventData));
                console.log('CSRF Token:', document.querySelector('input[name="__RequestVerificationToken"]').value);

                fetch('@Url.Action("Create", "Home")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(eventData)
                })
                .then(response => {
                    console.log('Response status:', response.status);
                    if (!response.ok) {
                        return response.json().then(data => { throw data; });
                    }
                    return response.json();
                })
                .then(data => {
                    bootstrap.Modal.getInstance(document.getElementById('createEventModal')).hide();
                    form.reset();
                    toastr.success('Event created successfully!');
                    loadEventsByDate();
                })
                .catch(error => {
                    console.error('Error creating event:', error);
                    if (error.errors) {
                        Object.keys(error.errors).forEach(field => {
                            const errorDiv = document.getElementById(`${field.toLowerCase()}-error`);
                            const input = document.getElementById(field.toLowerCase());
                            if (errorDiv && input) {
                                errorDiv.textContent = error.errors[field].join(', ');
                                input.classList.add('is-invalid');
                            }
                        });
                    } else {
                        toastr.error('Failed to create event: ' + (error.message || 'Unknown error'));
                    }
                })
                .finally(() => {
                    // Hide spinner, show button text, re-enable button
                    buttonText.style.display = 'inline';
                    spinner.style.display = 'none';
                    createButton.disabled = false;
                });
            } else {
                form.reportValidity();
                console.log('Form validation failed');
            }
        }

        // Handles RSVP
        let currentEventId = null;

        function openRSVPModal(evId) {
            currentEventId = evId;
        }

        function submitRSVPFromModal() {
            console.log('submitRSVPFromModal called');
            const form = document.getElementById('rsvpForm');
            const rsvpButton = document.getElementById('rsvpButton');
            const buttonText = document.getElementById('rsvpButtonText');
            const spinner = document.getElementById('rsvpSpinner');

            if (!form.checkValidity()) {
                console.log('Form validation failed');
                form.reportValidity();
                return;
            }

            // Show spinner, hide button text, disable button
            buttonText.style.display = 'none';
            spinner.style.display = 'inline-block';
            rsvpButton.disabled = true;

            const userName = document.getElementById('rsvpUserName').value;
            const response = document.getElementById('rsvpResponse').value;
            const evId = currentEventId;
            console.log('Before payload, currentEventId:', currentEventId);
            const payload = { evId, userName, response };
            console.log('Sending RSVP payload:', JSON.stringify(payload));

            fetch('@Url.Action("RSVP", "Home")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ evId, userName, response })
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => { throw data; });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    toastr.success(data.message);
                    bootstrap.Modal.getInstance(document.getElementById('rsvpModal')).hide();
                    form.reset();
                    loadEventsByDate();
                } else {
                    toastr.error(data.message);
                }
            })
            .catch(error => {
                toastr.error(error.error || 'Failed to RSVP');
            })
            .finally(() => {
                // Hide spinner, show button text, re-enable button
                buttonText.style.display = 'inline';
                spinner.style.display = 'none';
                rsvpButton.disabled = false;
            });
        }
    </script>
}